

#
# def artificial_rain(garden):
#     mega_counter=0gh
#
#     wei
#
#
#     # highest_index=0
#     for index,i in  enumerate(garden):
#
#         height=0
#         counter=0
#         for j in garden[index:]:
#             print(j,end='')
#             if height>j:
#                 height=0
#                 break
#             else:
#                 counter+1
#                 height=j
#
#         for k in garden[:index]:
#             if height>j:
#                 height=0
#                 break
#             else:
#                 counter+1
#                 height=k
#
#         if mega_counter<counter:
#             mega_counter=counter
#             # highest_index=index
#     print(mega_counter)
#     return mega_counter
'''Artificial rain
==========================
'''
'''first approach
'''
# import numpy as np
# def weigh(garden):
#     biggest=0
#     array_length=len(garden)
#     if array_length==1:
#         return 1
#     for current_jar_index in np.argsort(garden):
#     # for current_jar_index in garden:
#
#         count=1
#         # check forward for the best
#         for i in range(current_jar_index,array_length-1,1):
#             if garden[i+1]<=garden[i]:
#                 count+=1
#             else:
#                 break
#         #check backwards
#         for i in range(current_jar_index,0, -1):
#             if garden[i-1] <= garden[i]:
#                 count += 1
#             else:
#                 break
#         if count>biggest:
#             biggest=count
#     return biggest
#
# def artificial_rain(garden):
#     np_garden=np.array(garden)
#     return weigh(np_garden)


'''Second approach
'''

#
# def weigh(garden,biggest,current_jar_index):
#     # terminating at the end of the list
#     if current_jar_index>=len(garden):
#         return biggest
#     count=1
#     # check forward for the best
#     for i in range(current_jar_index,len(garden)-1,1):
#         if garden[i+1]<=garden[i]:
#             count+=1
#         else:
#             break
#     #check backwards
#     for i in range(current_jar_index,0, -1):
#         if garden[i-1] <= garden[i]:
#             count += 1
#         else:
#             break
#     if count>biggest:
#         return weigh(garden,count,current_jar_index+1)
#     return weigh(garden,biggest,current_jar_index+1)

'''
third approach 
'''

def Count(counter,garden,index):
    if index<1:
        return counter

    if garden[index - 1] <= garden[index]:
        counter+1
        return Count(counter,garden,index+1)
    else:return counter

def artificial_rain(garden,index):
    count=Count(1,garden,index)
    return count if artificial_rain(garden,index+1) < count else artificial_rain(garden,index +1)


# print(artific/ial_rain([4, 2, 3, 3, 2],0))
# cProfile.run('print(weigh(np.random.random_sample(1000000)))')
# print(artificial_rain([4, 2, 3, 3, 2]))
# print(np.random.random_sample(100))
# artificial_rain(np.random.randint(1,1000000000000))
# print(artificial_rain([1]))


# unit tests
import unittest

class MyTestCase(unittest.TestCase):
    def test_validate_pinc(self):
        self.assertEqual(True,True)
        pass

if __name__ == '__main__':
      unittest.main()
